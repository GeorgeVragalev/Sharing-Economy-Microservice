version: '3.8'

services:
  inventory-service:
    container_name: "inventory-service"
    ports:
      - "5217:80"
    build:
      context: ./SharingEconomyMicroservices
      dockerfile: Dockerfile-inventory
    environment:
      - ConnectionStrings__DefaultConnection=Host=inventory-db;Username=postgres;Password=postgres;Port=5432;Database=InventoryAPI;Pooling=true;
      - ASPNETCORE_URLS=http://+:80
    depends_on: 
      - inventory-db
    networks:
      - shared_app_network
  
  inventory-db:
    image: postgres:latest
    container_name: "inventory-db"
    environment: 
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=InventoryAPI
    ports:
      - "5433:5432"
    restart: "always"
    volumes:
      - inventory-db-data:/var/lib/postgresql/data
    networks:
      - shared_app_network


  order-service:
    container_name: "order-service"
    ports:
      - "5143:80"
    build:
      context: ./SharingEconomyMicroservices
      dockerfile: Dockerfile-order
    environment:
      - ConnectionStrings__DefaultConnection=Host=order-db;Username=postgres;Password=postgres;Port=5432;Database=OrderAPI;Pooling=true;
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - order-db
    networks:
      - shared_app_network

  order-db:
    image: postgres:latest
    container_name: "order-db"
    environment:
      - POSTGRES_DB=OrderAPI
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    restart: "always"
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - shared_app_network

  redis-service:
    image: "redis:latest"
    container_name: "redis"
    ports:
      - "6379:6379"
    networks:
      - shared_app_network


  api-gateway:
    container_name: "api-gateway"
    ports:
      - "5000:5000"
    build:
      context: ./APIGateway
      dockerfile: Dockerfile
    volumes:
      - ./APIGateway:/app
    depends_on:
      - inventory-service
      - order-service
      - redis-service
    networks:
      - shared_app_network

  prometheus:
    image: prom/prometheus:v2.31.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    depends_on:
      - inventory-service
      - order-service
      - api-gateway
    networks:
      - shared_app_network

  grafana:
    image: grafana/grafana:8.3.3
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - shared_app_network
        
volumes:
  prometheus_data:
  grafana_data:
  inventory-db-data:
  order-db-data:

networks:
  shared_app_network:
    driver: bridge
